AWSTemplateFormatVersion: "2010-09-09"
Description: Generates IOT Core policy for Device Onboarding
Resources:
  #=======================================================
  #
  #                    IOT Core Policy
  #
  #=======================================================

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName:
            Fn::Sub: iot-core-policy-generator-policy-${AWS::Region}
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - iot:CreatePolicy
                Resource:
                  - "*"

  IotPolicyGenerator:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: IotPolicyGenerator
      Handler: index.handler
      Runtime: nodejs18.x
      MemorySize: 128
      Timeout: 15
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      TracingConfig:
        Mode: Active
      Code:
        ZipFile: |
          const { IoTClient, CreatePolicyCommand } = require("@aws-sdk/client-iot");
          const response = require('cfn-response');
          exports.handler = function(event, context) {
              console.log("REQUEST RECEIVED:\n" + JSON.stringify(event));
              if (event.RequestType == "Delete") {
                  response.send(event, context, "SUCCESS");
                  return;
              }
              const policyName = "device-onboarding";
              const region = process.env.AWS_REGION;
              const awsAccountId = context.invokedFunctionArn.split(':')[4];
              const policyDocument = `{
                  "Version": "2012-10-17",
                  "Statement": [
                  {
                      "Effect": "Allow",
                      "Action": [
                      "iot:Connect"
                      ],
                      "Resource": [
                      "arn:aws:iot:${region}:${awsAccountId}:client/\${iot:Connection.Thing.ThingName}"
                      ]
                  },
                  {
                      "Effect": "Allow",
                      "Action": [
                      "iot:Publish",
                      "iot:Receive"
                      ],
                      "Resource": [
                      "arn:aws:iot:${region}:${awsAccountId}:topic/\${iot:Connection.Thing.ThingName}/*"
                      ]
                  },
                  {
                      "Effect": "Allow",
                      "Action": [
                      "iot:Subscribe"
                      ],
                      "Resource": [
                      "arn:aws:iot:${region}:${awsAccountId}:topicfilter/\${iot:Connection.Thing.ThingName}/*"
                      ]
                  }
                  ]     
              }`;
              console.log("Policy document:\n", policyDocument);
              const iot = new IoTClient();
              iot.send(new CreatePolicyCommand({policyName, policyDocument}), (err, data) => {
              let responseData, responseStatus;
                  if (err) {
                      responseStatus = "FAILED";
                      responseData = { Error: "createIoTPolicy call failed" };
                      console.error(responseData.Error + ":\n", err);
                  } else  {
                      responseStatus = "SUCCESS";
                      responseData = { policyName: data.policyName };
                      console.log('Response data: ' + JSON.stringify(responseData));
                  }
                  response.send(event, context, responseStatus, responseData);
              });
          };
  IoTPolicy:
    Type: Custom::IotPolicyGenerator
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - IotPolicyGenerator
          - Arn

Outputs:
  #=======================================================
  #
  #                 CloudFormation Outputs
  #
  #=======================================================
  IOTCorePolicyName:
    Description: The name of the newly created IOT Core Policy
    Value:
      Fn::GetAtt:
        - IoTPolicy
        - policyName
