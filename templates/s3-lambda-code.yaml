AWSTemplateFormatVersion: "2010-09-09"
Description: S3 Bucket for openvpn onboarding resources
Parameters:
  #=======================================================
  #
  #                   CloudFormation Parameters
  #
  #=======================================================
  S3CodeOriginBucket:
    Description: Public S3 bucket.
    Type: String
  SimRetrievalLambdaZipPath:
    Description: Zip path for the compressed folder with the sim retrieval lambda code.
    Type: String
  CreateSimLambdaZipPath:
    Description: Zip path for the compressed folder with the create sim lambda code.
    Type: String
  DisableSimLambdaZipPath:
    Description: Zip path for the compressed folder with the disable sim lambda code.
    Type: String
  DeviceOnboardingLambdaZipPath:
    Description: Zip path for the compressed folder with the device onboarding lambda code.
    Type: String
Resources:
  #=======================================================
  #
  #                     S3 Buckets
  #
  #=======================================================
  CodeBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  DownloadCodeIAMRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: name
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:DeleteObject
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:PutObject
                  - s3:GetBucketPolicy
                  - S3:PutObjectTagging
                Resource:
                  - Fn::Sub: ${CodeBucket.Arn}/*
                  - Fn::GetAtt:
                      - CodeBucket
                      - Arn
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - S3:GetObjectTagging
                  - s3:ListBucket
                Resource:
                  - Fn::Sub: arn:aws:s3:::${S3CodeOriginBucket}
                  - Fn::Sub: arn:aws:s3:::${S3CodeOriginBucket}/*

  DownloadCodeLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          import logging
          import threading
          import boto3
          import cfnresponse
          def copy_objects(source_bucket, dest_bucket, objects):
              s3 = boto3.client('s3')
              for o in objects:
                  copy_source = {
                      'Bucket': source_bucket,
                      'Key': o
                  }
                  print('copy_source: {}'.format(copy_source))
                  print('dest_bucket = {}'.format(dest_bucket))
                  s3.copy_object(CopySource=copy_source, Bucket=dest_bucket,
                        Key=o)
          def delete_objects(bucket, objects):
              s3 = boto3.client('s3')
              objects = {'Objects': [{'Key': o} for o in objects]}
              s3.delete_objects(Bucket=bucket, Delete=objects)
          def timeout(event, context):
              logging.error('Execution is about to time out, sending failure response to CloudFormation')
              cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)
          def handler(event, context):
              # make sure we send a failure to CloudFormation if the function
              # is going to timeout
              timer = threading.Timer((context.get_remaining_time_in_millis()
                        / 1000.00) - 0.5, timeout, args=[event, context])
              timer.start()
              print('Received event: {}'.format(json.dumps(event)))
              status = cfnresponse.SUCCESS
              try:
                  source_bucket = event['ResourceProperties']['SourceBucket']
                  dest_bucket = event['ResourceProperties']['DestBucket']
                  objects = event['ResourceProperties']['Objects']
                  if event['RequestType'] == 'Delete':
                      delete_objects(dest_bucket, objects)
                  else:
                      copy_objects(source_bucket, dest_bucket, objects)
              except Exception as e:
                  logging.error('Exception: {}'.format(e), exc_info=True)
                  status = cfnresponse.FAILED
              finally:
                  timer.cancel()
                  cfnresponse.send(event, context, status, {}, None)
      Handler: index.handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - DownloadCodeIAMRole
          - Arn
      Runtime: python3.9
      Timeout: 240
      TracingConfig:
        Mode: Active

  LambdaCodeDownloadService:
    Type: AWS::CloudFormation::CustomResource
    DependsOn: DownloadCodeIAMRole
    Version: 1.0
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - DownloadCodeLambdaFunction
          - Arn
      DestBucket:
        Ref: CodeBucket
      SourceBucket:
        Ref: S3CodeOriginBucket
      Objects:
        - Ref: SimRetrievalLambdaZipPath
        - Ref: CreateSimLambdaZipPath
        - Ref: DisableSimLambdaZipPath
        - Ref: DeviceOnboardingLambdaZipPath

Outputs:
  #=======================================================
  #
  #                 CloudFormation Outputs
  #
  #=======================================================
  LocalBucketArn:
    Description: Arn for Code Bucket S3
    Value:
      Fn::GetAtt:
        - CodeBucket
        - Arn
  LocalBucketName:
    Description: Name for Code Bucket S3
    Value:
      Ref: CodeBucket
