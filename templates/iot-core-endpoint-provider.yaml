AWSTemplateFormatVersion: "2010-09-09"
Description: Contains custom resource lambda which provides IOT Core Endpoint URL as output
Resources:
  #=======================================================
  #
  #                IOT Core Endpoint retrieval Lambda
  #
  #=======================================================
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName:
            Fn::Sub: iot-core-endpoint-provider-policy-${AWS::Region}
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - iot:DescribeEndpoint
                Resource:
                  - "*"

  IotEndpointProvider:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: IotEndpointUrlProvider
      Handler: index.handler
      Runtime: nodejs18.x
      MemorySize: 128
      Timeout: 15
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      TracingConfig:
        Mode: Active
      Code:
        ZipFile: |
          const { IoTClient, DescribeEndpointCommand } = require("@aws-sdk/client-iot");
          exports.handler = function(event, context) {
              console.log("REQUEST RECEIVED:\n" + JSON.stringify(event));
              if (event.RequestType == "Delete") {
                  sendResponse(event, context, "SUCCESS");
                  return;
              }
              const iot = new IoTClient();
              iot.send(new DescribeEndpointCommand({endpointType: "iot:Data-ATS"}), (err, data) => {
              let responseData, responseStatus;
                  if (err) {
                      responseStatus = "FAILED";
                      responseData = { Error: "describeEndpoint call failed" };
                      console.log(responseData.Error + ":\n", err);
                  } else  {
                      responseStatus = "SUCCESS";
                      responseData = { IotEndpointAddress: data.endpointAddress };
                      console.log('response data: ' + JSON.stringify(responseData));
                  }
                  sendResponse(event, context, responseStatus, responseData);
              });
          };
          // Send response to the pre-signed S3 URL
          function sendResponse(event, context, responseStatus, responseData) {
              var responseBody = JSON.stringify({
                  Status: responseStatus,
                  Reason: "See the details in CloudWatch Log Stream: " + context.logStreamName,
                  PhysicalResourceId: context.logStreamName,
                  StackId: event.StackId,
                  RequestId: event.RequestId,
                  LogicalResourceId: event.LogicalResourceId,
                  Data: responseData
              });
              console.log("RESPONSE BODY:\n", responseBody);
              var https = require("https");
              var url = require("url");
              var parsedUrl = url.parse(event.ResponseURL);
              var options = {
                  hostname: parsedUrl.hostname,
                  port: 443,
                  path: parsedUrl.path,
                  method: "PUT",
                  headers: {
                      "content-type": "",
                      "content-length": responseBody.length
                  }
              };
              console.log("SENDING RESPONSE...\n");
              var request = https.request(options, function(response) {
                  console.log("STATUS: " + response.statusCode);
                  console.log("HEADERS: " + JSON.stringify(response.headers));
                  context.done();
              });
              request.on("error", function(error) {
                  console.log("sendResponse Error:" + error);
                  context.done();
              });
              // write data to request body
              request.write(responseBody);
              request.end();
          }
  IotEndpoint:
    Type: Custom::IotEndpoint
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - IotEndpointProvider
          - Arn

Outputs:
  #=======================================================
  #
  #                 CloudFormation Outputs
  #
  #=======================================================
  IotEndpointAddress:
    Value:
      Fn::GetAtt:
        - IotEndpoint
        - IotEndpointAddress
    Description: Retrieved Iot Core Endpoint Url
